version: '3.8'

services:
  autoresolve-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: autoresolve:v3.2
    container_name: autoresolve-backend
    restart: unless-stopped
    
    ports:
      - "8000:8000"
    
    environment:
      - API_KEY=${API_KEY:-production-secret-key}
      - JWT_SECRET=${JWT_SECRET:-jwt-secret-key}
      - BACKEND_PORT=8000
      - PYTHONPATH=/app/src
      - EXPORT_DIR=/app/exports
      - TEMP_DIR=/app/temp
      - LOG_LEVEL=INFO
      
    volumes:
      - ./exports:/app/exports
      - ./logs:/app/logs
      - ./assets:/app/assets:ro
      - ./datasets:/app/datasets:ro
      - ./artifacts:/app/artifacts
      - ./temp:/app/temp
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          memory: 18G  # Buffer above 16G blueprint limit
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    
    networks:
      - autoresolve-network

  # Nginx reverse proxy for production
  autoresolve-proxy:
    image: nginx:alpine
    container_name: autoresolve-proxy
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    
    depends_on:
      autoresolve-backend:
        condition: service_healthy
    
    networks:
      - autoresolve-network

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: autoresolve-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    networks:
      - autoresolve-network

  grafana:
    image: grafana/grafana:latest
    container_name: autoresolve-grafana
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - autoresolve-network

volumes:
  prometheus-data:
  grafana-data:

networks:
  autoresolve-network:
    driver: bridge